import telebot
import sqlite3
import pandas as pd
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BotKey)

DB_FILE = 'database.sql'

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –±–æ—Ç–∞
BotKey = "7160129906:AAHBQbCiCtuqeTeCHjzWFnaI7OKbsqkwo8k"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á –±–æ—Ç–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if not os.path.exists(DB_FILE):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('CREATE TABLE IF NOT EXISTS Helpdesk_ticket ('
                'id INTEGER PRIMARY KEY AUTOINCREMENT,'
                'Number_ticket VARCHAR(11),'
                'Date_of_handover VARCHAR(11),'
                'Date_of_commencement_of_employment VARCHAR(11),'
                'Reopening_date VARCHAR(11),'
                'Deadline VARCHAR(11),'
                'URL VARCHAR(200),'
                'Status_ASUOP VARCHAR(50),'
                'Status_BITRIX VARCHAR(50),'
                'Responsible_for_this_task VARCHAR(50),'
                'User_contact VARCHAR(200),'
                'Subject_of_the_ticket VARCHAR(1000),'
                'Comment VARCHAR(500),'
                'Service VARCHAR(50),'
                'Priority VARCHAR(50)'
                ')')

    conn.commit()
    cur.close()
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start"
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Å–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∑–∏–º –æ–±—Ä–∞—â–µ–Ω–∏—è!')
    bot.register_next_step_handler(message, handle_document)
#test
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def handle_document(message):
    if message.document is not None and message.document.file_name.endswith('.xlsx'):
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open('data.xlsx', 'wb') as new_file:
            new_file.write(downloaded_file)

        df = pd.read_excel('data.xlsx')

        conn = sqlite3.connect(DB_FILE)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        df.to_sql('Helpdesk_ticket', conn, if_exists='replace', index=False)

        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ XLSX.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "query"
@bot.message_handler(commands=['query'])
def handle_query(message):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()

    cur.execute("SELECT * FROM Helpdesk_ticket")
    rows = cur.fetchall()

    if rows:
        for row in rows:
            bot.send_message(message.chat.id, str(row))
    else:
        bot.send_message(message.chat.id, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ!')

    cur.close()
    conn.close()

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
bot.polling(none_stop=True)


@bot.message_handler(func=lambda message: message.text.lower() == '–Ω–∞–ø–æ–º–Ω–∏')
def handle_remind(message):
    bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...')
    time.sleep(30)  # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –≤ 30 —Å–µ–∫—É–Ω–¥
    bot.send_message(message.chat.id, '–í—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ —á—Ç–æ-—Ç–æ!')


# –Ω–µ –∑–∞–±—ã—Ç—å –≤–∫–ª—é—á–∏—Ç—å, —á—Ç–æ–±—ã –æ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ –æ–Ω –≤–æ–æ–±—â–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—Å–ª–µ 6 —á–∞—Å–æ–≤ —Ç—Ä—É–¥–∞)
# bot.polling(none_stop=True)


# –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
updater.start_polling()
updater.idle()

#–í—ã–∑–≤–∞—Ç—å –±–∏—Ç—Ä—É

# –î–æ—Å—Ç–∞—Ç—å –∏–∑ excel
# –ø—Ä–æ–¥—É–º–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã—Ö–æ–¥–µ
def get():
    return

def logic():
    return

def send():
    return





# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('obrashcheniya.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—è–º–∏



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∞—Ç
def calculate_date(data, days):
    return (datetime.strptime(data, '%Y-%m-%d %H:%M:%S') + timedelta(days)).strftime('%Y-%m-%d %H:%M:%S')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
cursor.execute('''INSERT INTO obrazheniya (nomer_obrashcheniya, data_perevoda_na_3LTP, data_vzyatiya_v_rabotu, 
                data_pereotkrytiya, ssylka_na_obrashcheniye, otvetstvenny, soderzhaniye_obrashcheniya, 
                servis, prioritet)
                VALUES ('123456', '2024-02-23 12:00:00', 
                '2024-02-23 13:00:00', '2024-02-24 10:00:00', 'example.com', 
                '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', '–°–µ—Ä–≤–∏—Å A', '–í—ã—Å–æ–∫–∏–π')''')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
conn.commit()
conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('obrashcheniya.db')
cursor = conn.cursor()


def update_database_from_excel(file_path):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞
    data = pd.read_excel(file_path)

    # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞
    for index, row in data.iterrows():
        nomer_obrashcheniya = row[
            'nomer_obrashcheniya']  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–æ–º–µ—Ä–æ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'nomer_obrashcheniya'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –æ–±—Ä–∞—â–µ–Ω–∏—è
        cursor.execute("SELECT * FROM obrazheniya WHERE nomer_obrashcheniya = ?", (nomer_obrashcheniya,))
        existing_entry = cursor.fetchone()

        if existing_entry:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            cursor.execute(
                "UPDATE obrazheniya SET data_perevoda_na_3LTP = ?, data_vzyatiya_v_rabotu = ? WHERE nomer_obrashcheniya = ?",
                (row['data_perevoda_na_3LTP'], row['data_vzyatiya_v_rabotu'], nomer_obrashcheniya))
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute(
                "INSERT INTO obrazheniya (nomer_obrashcheniya, data_perevoda_na_3LTP, data_vzyatiya_v_rabotu) VALUES (?, ?, ?)",
                (nomer_obrashcheniya, row['data_perevoda_na_3LTP'], row['data_vzyatiya_v_rabotu']))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.commit()


# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
update_database_from_excel('sample_data.xlsx')

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn.close()

import sqlite3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('obrashcheniya.db')
cursor = conn.cursor()


def get_list_of_cases():
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM obrazheniya")
    cases = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    list_of_cases = []
    for case in cases:
        list_of_cases.append({
            'nomer_obrashcheniya': case[0],  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è - –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –≤ –∑–∞–ø–∏—Å–∏
            'data_perevoda_na_3LTP': case[1],  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –¥–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ 3LTP - –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ
            'data_vzyatiya_v_rabotu': case[2]  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É - —Ç—Ä–µ—Ç—å–µ –ø–æ–ª–µ
        })

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
    return list_of_cases


#  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
cases_list = get_list_of_cases()
for case in cases_list:
    print(case)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∞–π–Ω–µ–≥–æ —Å—Ä–æ–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_deadlines():


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –∫—Ä–∞–π–Ω–∏–º —Å—Ä–æ–∫–æ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –ø—Ä–æ—à–µ–ª
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö

def upload_list(update, context):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    file = context.bot.get_file(update.message.document.file_id)
    file_bytes = file.download_as_bytearray()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_extension = file.file_path.split('.')[-1]

    if file_extension == 'xlsx':
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(f'temp_file.xlsx', 'wb') as temp_file:
            temp_file.write(file_bytes)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
        update_database_from_excel('temp_file.xlsx')

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove('temp_file.xlsx')

        context.bot.send_message(chat_id=update.effective_chat.id, text="–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Excel —Ñ–∞–π–ª–∞ üìÇüìä")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx üìë‚ùå")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/download_list" –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
def download_list(update, context):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
    list_of_cases = get_list_of_cases()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/check_deadlines" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∞–π–Ω–∏—Ö —Å—Ä–æ–∫–æ–≤
def check_deadlines_command(update, context):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞–π–Ω–∏–µ —Å—Ä–æ–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
    check_deadlines()

def get_notification():
    pass

def task_distribution(task_list, data_base_project_manager):
    notification = get_notification()
    for task in task_list:
        for user in data_base_project_manager:
            if task['RESPONSIBLE_ID'] == user['ID']:
                if task['Notification'] == True:
                    message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user['ID']} –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏ —É–∂–µ –æ–ø–æ–≤–µ—â–µ–Ω"
                else:
                    message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user['ID']} –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏ –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                break
    return

def bot_send_message(message):
    pass
